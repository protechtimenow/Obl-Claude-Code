# Advanced Automation Configuration
# This file defines comprehensive automation processes with detailed instructions

global_settings:
  timeout_default: 3600  # 1 hour default timeout
  retry_default: 3
  log_level: INFO
  notification_webhook: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
  
environments:
  development:
    database_url: "postgresql://dev_user:dev_pass@localhost:5432/dev_db"
    api_endpoint: "https://dev-api.example.com"
    resource_limits:
      cpu: "2"
      memory: "4Gi"
      
  staging:
    database_url: "postgresql://stage_user:stage_pass@staging-db:5432/stage_db"
    api_endpoint: "https://staging-api.example.com"
    resource_limits:
      cpu: "4"
      memory: "8Gi"
      
  production:
    database_url: "postgresql://prod_user:prod_pass@prod-db:5432/prod_db"
    api_endpoint: "https://api.example.com"
    resource_limits:
      cpu: "8"
      memory: "16Gi"

processes:
  full_deployment_pipeline:
    description: "Complete CI/CD pipeline with comprehensive automation"
    steps:
      - name: "code_quality_analysis"
        command: "./scripts/quality-check.sh"
        dependencies: []
        timeout: 600
        retry_count: 2
        critical: true
        
      - name: "security_scan"
        command: "./scripts/security-scan.sh"
        dependencies: ["code_quality_analysis"]
        timeout: 1200
        retry_count: 1
        critical: true
        
      - name: "unit_tests"
        command: "pytest tests/unit/ --cov=src/ --cov-report=xml"
        dependencies: ["code_quality_analysis"]
        timeout: 900
        retry_count: 2
        critical: true
        
      - name: "integration_tests"
        command: "pytest tests/integration/ --maxfail=5"
        dependencies: ["unit_tests", "security_scan"]
        timeout: 1800
        retry_count: 1
        critical: true
        
      - name: "build_artifacts"
        command: "docker build -t app:latest . && docker push registry.com/app:latest"
        dependencies: ["integration_tests"]
        timeout: 2400
        retry_count: 2
        critical: true
        
      - name: "deploy_staging"
        command: "kubectl apply -f k8s/staging/ --namespace=staging"
        dependencies: ["build_artifacts"]
        timeout: 1200
        retry_count: 3
        critical: false
        
      - name: "staging_smoke_tests"
        command: "./scripts/smoke-tests.sh staging"
        dependencies: ["deploy_staging"]
        timeout: 600
        retry_count: 2
        critical: true
        
      - name: "deploy_production"
        command: "./scripts/blue-green-deploy.sh production"
        dependencies: ["staging_smoke_tests"]
        timeout: 1800
        retry_count: 1
        critical: true
        condition: "branch == 'main' and approved == true"
        
  infrastructure_maintenance:
    description: "Automated infrastructure maintenance and optimization"
    schedule: "0 2 * * 0"  # Weekly at 2 AM Sunday
    steps:
      - name: "backup_databases"
        command: "./scripts/backup-dbs.sh"
        dependencies: []
        timeout: 3600
        retry_count: 2
        critical: true
        
      - name: "update_security_patches"
        command: "./scripts/security-updates.sh"
        dependencies: ["backup_databases"]
        timeout: 2400
        retry_count: 1
        critical: true
        
      - name: "optimize_resources"
        command: "./scripts/resource-optimization.sh"
        dependencies: ["update_security_patches"]
        timeout: 1800
        retry_count: 1
        critical: false
        
      - name: "generate_health_report"
        command: "./scripts/health-report.sh"
        dependencies: ["optimize_resources"]
        timeout: 600
        retry_count: 1
        critical: false

notifications:
  on_success:
    - type: "webhook"
      url: "${notification_webhook}"
      payload:
        text: "✅ Process {{process_name}} completed successfully"
        
  on_failure:
    - type: "webhook"
      url: "${notification_webhook}"
      payload:
        text: "❌ Process {{process_name}} failed. Check logs for details."
        
  on_retry:
    - type: "webhook"
      url: "${notification_webhook}"
      payload:
        text: "🔄 Retrying step {{step_name}} in process {{process_name}}"

monitoring:
  metrics_endpoint: "http://prometheus:9090"
  health_checks:
    - name: "database_connectivity"
      command: "pg_isready -h ${DB_HOST} -p ${DB_PORT}"
      interval: 60
      
    - name: "api_responsiveness"
      command: "curl -f ${API_ENDPOINT}/health"
      interval: 30
      
    - name: "disk_usage"
      command: "df -h | awk '$5 > 80 {exit 1}'"
      interval: 300