#!/bin/bash\n\n# Claude Integration Setup and Management Script\n# This script facilitates seamless integration between Claude instances and the project\n\nset -euo pipefail\n\n# Configuration\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nreadonly PROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nreadonly CLAUDE_DIR=\"${PROJECT_ROOT}/.claude\"\nreadonly LOGS_DIR=\"${PROJECT_ROOT}/logs\"\n\n# Color codes\nreadonly GREEN='\\033[0;32m'\nreadonly BLUE='\\033[0;34m'\nreadonly YELLOW='\\033[1;33m'\nreadonly RED='\\033[0;31m'\nreadonly NC='\\033[0m'\n\n# Logging functions\nlog_info() {\n    echo -e \"${BLUE}[CLAUDE-INTEGRATION]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[CLAUDE-INTEGRATION]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[CLAUDE-INTEGRATION]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[CLAUDE-INTEGRATION]${NC} $1\"\n}\n\n# Generate current project context for Claude\ngenerate_claude_context() {\n    log_info \"Generating current project context for Claude...\"\n    \n    local context_file=\"${CLAUDE_DIR}/current-context.md\"\n    \n    cat > \"$context_file\" << EOF\n# Current Project Context for Claude\n\n**Generated**: $(date '+%Y-%m-%d %H:%M:%S')\n**Branch**: $(git rev-parse --abbrev-ref HEAD)\n**Commit**: $(git rev-parse --short HEAD)\n**Last Commit**: $(git log -1 --pretty=format:'%s (%an, %ar)')\n\n## Recent Changes\n$(git log --oneline -10)\n\n## Modified Files (Last 24 hours)\n$(git log --since=\"24 hours ago\" --name-only --pretty=format: | sort | uniq | grep -v '^$' | head -20)\n\n## Current Project Structure\n\\`\\`\\`\n$(find . -type f -name \"*.py\" -o -name \"*.sh\" -o -name \"*.yml\" -o -name \"*.yaml\" -o -name \"*.md\" | grep -v '.git' | head -30)\n\\`\\`\\`\n\n## Key Configuration Files\n- automation/config.yaml: $(wc -l < automation/config.yaml 2>/dev/null || echo \"0\") lines\n- automation/process-orchestrator.py: $(wc -l < automation/process-orchestrator.py 2>/dev/null || echo \"0\") lines\n- ci-cd/pipeline-automation.sh: $(wc -l < ci-cd/pipeline-automation.sh 2>/dev/null || echo \"0\") lines\n\n## Current Development Focus\n$(head -20 \"${CLAUDE_DIR}/improvement-tracker.md\" 2>/dev/null | grep -E \"^- \\[ \\]\" | head -5 || echo \"No pending tasks found\")\n\n## System Status\n- Git Status: $(git status --porcelain | wc -l) modified files\n- Automation Processes: $(grep -c \"^  [a-zA-Z_].*:$\" automation/config.yaml 2>/dev/null || echo \"0\") configured\n- Scripts Available: $(find scripts/ -name \"*.sh\" -type f 2>/dev/null | wc -l) shell scripts\n\nEOF\n    \n    log_success \"Context generated at ${context_file}\"\n}\n\n# Prepare Claude Code environment\nsetup_claude_code_environment() {\n    log_info \"Setting up Claude Code integration environment...\"\n    \n    # Create necessary directories\n    mkdir -p \"$CLAUDE_DIR\" \"$LOGS_DIR\" \"${PROJECT_ROOT}/decisions\" \"${PROJECT_ROOT}/insights\"\n    \n    # Create Claude Code configuration\n    cat > \"${CLAUDE_DIR}/claude-code.json\" << EOF\n{\n    \"projectName\": \"Obl Claude Code\",\n    \"description\": \"Advanced automation framework with Claude integration\",\n    \"contextFiles\": [\n        \".claude/project-memory.md\",\n        \".claude/improvement-tracker.md\",\n        \".claude/current-context.md\",\n        \"automation/config.yaml\",\n        \"README.md\"\n    ],\n    \"primaryLanguages\": [\"python\", \"bash\", \"yaml\"],\n    \"frameworks\": [\"automation\", \"ci-cd\", \"infrastructure\"],\n    \"customCommands\": {\n        \"analyze\": \"Analyze current system and suggest improvements\",\n        \"optimize\": \"Optimize the most critical bottleneck\",\n        \"secure\": \"Perform security audit and implement fixes\",\n        \"monitor\": \"Add monitoring for all critical processes\",\n        \"document\": \"Update documentation for recent changes\"\n    },\n    \"autoTasks\": [\n        \"Generate context before major operations\",\n        \"Update improvement tracker after changes\",\n        \"Run tests before commits\",\n        \"Update documentation for new features\"\n    ]\n}\nEOF\n    \n    # Create quick-start Claude commands\n    cat > \"${PROJECT_ROOT}/claude-commands.md\" << 'EOF'\n# Quick Claude Commands\n\n## For New Chat Sessions\n```\n\"I'm working on Obl Claude Code. Please read .claude/project-memory.md for context, then suggest the highest priority improvement.\"\n```\n\n## For Claude Code Terminal\n```bash\n# Quick analysis\nclaude-code \"Review current state and suggest top improvement\"\n\n# Focused development\nclaude-code \"Work on highest priority in improvement-tracker.md\"\n\n# Security focus\nclaude-code \"Perform comprehensive security audit and implement fixes\"\n\n# Performance optimization\nclaude-code \"Analyze and optimize the biggest performance bottleneck\"\n\n# Documentation update\nclaude-code \"Update all documentation to reflect recent changes\"\n```\n\n## For Specific Tasks\n```bash\n# Add new automation process\nclaude-code \"Add database migration automation to config.yaml\"\n\n# Infrastructure deployment\nclaude-code \"Create Terraform modules for AWS deployment\"\n\n# Monitoring setup\nclaude-code \"Implement Prometheus monitoring for all processes\"\n\n# Testing enhancement\nclaude-code \"Add comprehensive integration tests\"\n```\nEOF\n    \n    log_success \"Claude Code environment configured\"\n}\n\n# Update project state tracking\nupdate_project_state() {\n    log_info \"Updating project state tracking...\"\n    \n    # Generate current metrics\n    local metrics_file=\"${CLAUDE_DIR}/metrics.json\"\n    \n    cat > \"$metrics_file\" << EOF\n{\n    \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n    \"git\": {\n        \"branch\": \"$(git rev-parse --abbrev-ref HEAD)\",\n        \"commit\": \"$(git rev-parse HEAD)\",\n        \"shortCommit\": \"$(git rev-parse --short HEAD)\",\n        \"modifiedFiles\": $(git status --porcelain | wc -l),\n        \"totalCommits\": $(git rev-list --count HEAD)\n    },\n    \"codebase\": {\n        \"pythonFiles\": $(find . -name \"*.py\" -type f | wc -l),\n        \"shellScripts\": $(find . -name \"*.sh\" -type f | wc -l),\n        \"yamlFiles\": $(find . -name \"*.yml\" -o -name \"*.yaml\" -type f | wc -l),\n        \"markdownFiles\": $(find . -name \"*.md\" -type f | wc -l),\n        \"totalLines\": $(find . -name \"*.py\" -o -name \"*.sh\" -o -name \"*.yml\" -o -name \"*.yaml\" | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo 0)\n    },\n    \"automation\": {\n        \"configuredProcesses\": $(grep -c \"^  [a-zA-Z_].*:$\" automation/config.yaml 2>/dev/null || echo 0),\n        \"environments\": $(grep -c \"^  [a-zA-Z_].*:$\" automation/config.yaml 2>/dev/null | head -3 | wc -l || echo 0),\n        \"scriptFiles\": $(find scripts/ -name \"*.sh\" -type f 2>/dev/null | wc -l)\n    }\n}\nEOF\n    \n    log_success \"Project metrics updated at ${metrics_file}\"\n}\n\n# Create Claude-friendly development guide\ncreate_development_guide() {\n    log_info \"Creating Claude development guide...\"\n    \n    cat > \"${CLAUDE_DIR}/development-guide.md\" << 'EOF'\n# Claude Development Guide for Obl Claude Code\n\n## Quick Onboarding for New Claude Instances\n\n### 1. Essential Context Files\n- `.claude/project-memory.md` - Complete project overview and history\n- `.claude/improvement-tracker.md` - Current priorities and pending improvements\n- `.claude/current-context.md` - Real-time project state\n- `automation/config.yaml` - Current automation capabilities\n\n### 2. Development Principles\n- **Documentation-First**: Every change must include documentation updates\n- **Claude-Optimized**: All code and configs should be Claude-readable\n- **Automation-Native**: Everything should be automatable\n- **Future-Proof**: Design for continuous improvement\n\n### 3. Standard Development Workflow\n1. Read context files for current state understanding\n2. Identify highest priority improvement from tracker\n3. Implement with comprehensive documentation\n4. Update tracking files with progress\n5. Commit with detailed messages for future Claude instances\n\n### 4. Code Quality Standards\n- All Python code: Type hints, docstrings, error handling\n- All Shell scripts: Error handling, logging, documentation\n- All YAML configs: Inline comments and examples\n- All new features: Tests, monitoring, documentation\n\n### 5. Claude Code Integration Points\n- Use predefined commands from `claude-commands.md`\n- Always update context before major operations\n- Leverage automation framework for repetitive tasks\n- Maintain consistency with established patterns\n\n### 6. Knowledge Contribution\n- Document decisions in `/decisions/` directory\n- Add insights to `/insights/` directory\n- Update metrics after significant changes\n- Preserve rationale for future Claude instances\n\n## Technical Architecture Overview\n\n### Core Components\n- **Automation Engine** (`automation/`): Process orchestration and management\n- **CI/CD Pipeline** (`ci-cd/`): Deployment and testing automation\n- **Infrastructure** (`infrastructure/`): Infrastructure as Code\n- **Monitoring** (`monitoring/`): System health and performance\n- **Security** (`security/`): Automated security and compliance\n\n### Integration Points\n- GitHub Actions for CI/CD automation\n- Claude Code for terminal-based development\n- Configuration-driven process management\n- Self-documenting architecture\n\n### Extension Guidelines\n- New automation processes go in `automation/config.yaml`\n- Infrastructure code goes in `infrastructure/`\n- Monitoring configs go in `monitoring/`\n- All scripts include comprehensive error handling and logging\n\nEOF\n    \n    log_success \"Development guide created\"\n}\n\n# Generate deployment-ready package\npackage_for_claude_code() {\n    log_info \"Packaging project for Claude Code deployment...\"\n    \n    local package_dir=\"${PROJECT_ROOT}/claude-package\"\n    rm -rf \"$package_dir\"\n    mkdir -p \"$package_dir\"\n    \n    # Copy essential files for Claude Code\n    cp -r .claude \"$package_dir/\"\n    cp -r automation \"$package_dir/\"\n    cp -r scripts \"$package_dir/\"\n    cp README.md \"$package_dir/\"\n    cp claude-commands.md \"$package_dir/\" 2>/dev/null || true\n    \n    # Create deployment instructions\n    cat > \"${package_dir}/DEPLOY.md\" << 'EOF'\n# Claude Code Deployment Package\n\n## Quick Setup\n1. Extract this package to your development environment\n2. Run: `./scripts/claude-integration.sh setup`\n3. Start working: `claude-code \"Analyze project and suggest next steps\"`\n\n## Included\n- Complete project context in `.claude/` directory\n- Core automation framework in `automation/`\n- Development scripts in `scripts/`\n- Quick reference commands in `claude-commands.md`\n\n## First Commands\n```bash\nclaude-code \"Read .claude/project-memory.md and suggest highest priority improvement\"\n```\nEOF\n    \n    log_success \"Package created at ${package_dir}\"\n}\n\n# Main function\nmain() {\n    local command=${1:-\"help\"}\n    \n    case $command in\n        \"setup\")\n            log_info \"Setting up Claude integration...\"\n            setup_claude_code_environment\n            generate_claude_context\n            update_project_state\n            create_development_guide\n            log_success \"Claude integration setup complete!\"\n            ;;\n        \"update-context\")\n            generate_claude_context\n            update_project_state\n            ;;\n        \"package\")\n            package_for_claude_code\n            ;;\n        \"help\")\n            echo \"Claude Integration Script\"\n            echo \"Usage: $0 [setup|update-context|package|help]\"\n            echo \"\"\n            echo \"Commands:\"\n            echo \"  setup          - Initial Claude integration setup\"\n            echo \"  update-context - Update project context for Claude\"\n            echo \"  package        - Create deployment package\"\n            echo \"  help           - Show this help message\"\n            ;;\n        *)\n            log_error \"Unknown command: $command\"\n            echo \"Use '$0 help' for available commands\"\n            exit 1\n            ;;\n    esac\n}\n\n# Execute main function\nmain \"$@\"